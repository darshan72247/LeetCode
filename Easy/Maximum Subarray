class Solution {
    public int maxSubArray(int[] nums) {
        return mss(nums,0,nums.length-1);
    }
    
    public int mss(int[]nums,int low,int high){
        if (low == high){
            return nums[low];
        }
        int mid = (low + high ) / 2;
        int leftSum = mss(nums,low,mid);
        int rightSum = mss(nums,mid+1,high);
        int crossingSum = crossing(nums,low,mid,high);
        return max(leftSum,rightSum,crossingSum);
    }
    
    public int crossing(int[] nums,int low, int mid,int high){
        int leftSum =  Integer.MIN_VALUE;
        int sum = 0;
        for(int i = mid;i>=low;i--){
            sum += nums[i];
            if(sum > leftSum){
                leftSum = sum;
            }
        }
        
        int rightSum =  Integer.MIN_VALUE;
        sum = 0;
        for(int i = mid+1;i<=high;i++){
            sum += nums[i];
            if(sum > rightSum){
                rightSum = sum;
            }
        }
        
        return leftSum + rightSum;
    }
    
    public int max(int leftSum , int rightSum , int crossingSum){
        if(leftSum >= rightSum && leftSum >= crossingSum){
            return leftSum;
        } else if(rightSum >= leftSum && rightSum >= crossingSum){
            return rightSum;
        } else {
            return crossingSum;
        }
    }
}
