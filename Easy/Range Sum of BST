/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        // Base Case :- if root is null return 0
        if(root == null){
            return 0;
        }
        int sum = 0;
        if(root.val >= low && root.val <= high){
            sum += root.val;
        }
        // As we are given it is a binary search tree
        // we know if the value on current root is stricly less than 
        // low then we can say that all it's left sub-tree values will be low
        // so we need not need to check it
        if(root.left != null && root.val >= low){
            sum += rangeSumBST(root.left,low,high);
        }
        // Similarlly on the right too 
        if(root.right != null && root.val <= high){
            sum += rangeSumBST(root.right,low,high);
        }
        return sum;
    }
}
